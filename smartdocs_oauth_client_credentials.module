<?php

/**
 * On SmartDocs pages add the logic for Oauth Client Credentials Grant
 *
 * This module is a hack to allow SmartDocs to create a widget for Client Credential Grants
 *
 * The Edge backend cannot process this information.
 *
 * @param $vars
 */
function smartdocs_oauth_client_credentials_preprocess_page(&$vars){
  $item = menu_get_item();
  if($item['map'][0] == 'node' && $item['map'][1]->type == 'smart_method'){
    $oauth_schemes = [];
    $config = devconnect_default_org_config();
    $node = $item['map'][1];

    $security = new \Apigee\SmartDocs\Security($config, $node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term']->name, $node->field_smart_method_revision_num[LANGUAGE_NONE][0]['value']);
    foreach($node->field_smart_method_security[LANGUAGE_NONE] as $row){
      $scheme = $security->load($row['value']);
      if($scheme instanceof \Apigee\SmartDocs\Security\Oauth2Scheme) {
        $oauth_schemes[] = $row['value'];
      }
    }
    dpm($oauth_schemes);
    $form = drupal_get_form('smartdocs_oauth_client_credentials_form', $node, $oauth_schemes);
    drupal_add_js(array('apigee_OauthClientCredentialsForm' => drupal_render($form)), 'setting');
    drupal_add_library("system", "drupal.ajax");
    drupal_add_js(drupal_get_path('module', 'smartdocs_oauth_client_credentials') ."/smartdocs_oauth_client_credentials.js");
  }
}

/**
 * Form to accept Username and password so that it we can generate the access token
 *
 * @param $form
 * @param $form_state
 * @param $node
 * @param $oauth_schemes
 * @return mixed
 */
function smartdocs_oauth_client_credentials_form($form, $form_state, $node, $oauth_schemes){
  if(empty($oauth_schemes)) {
    return $form;
  }
  $form['oauth_client_cred_username'] = [
    '#title' => 'Username',
    '#type' => 'textfield',
    '#required' => 'TRUE',
  ];
  $form['oauth_client_cred_password'] = [
    '#title' => 'Password',
    '#type' => 'password',
    '#required' => 'TRUE',
  ];
  $form['model'] = [
    '#type' => 'value',
    '#value' => $node->field_smart_method_model[LANGUAGE_NONE][0]['taxonomy_term']->name,
  ];
  $form['revision'] = [
    '#type' => 'value',
    '#value' => $node->field_smart_method_revision_num[LANGUAGE_NONE][0]['value'],
  ];
  $security = [];
  foreach($node->field_smart_method_security[LANGUAGE_NONE][0] as $row){
    $security[] = $row['value'];
  }
  $form['security'] = [
    '#type' => 'value',
    '#value' => $oauth_schemes,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Generate OAuth Token'),
    '#ajax' => [
      'callback' => 'smartdocs_oauth_client_credentials_form_generate_token',
    ]
  ];
  $form['#attached'][js][] = drupal_get_path('module', 'smartdocs_oauth_client_credentials') . "/smartdocs_oauth_client_credentials.js";
  return $form;
}

/**
 * Submit function to generate access token for the Oauth client Credentials
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function smartdocs_oauth_client_credentials_form_generate_token($form, $form_state){
  $config = devconnect_default_org_config();
  $security = new \Apigee\SmartDocs\Security($config, $form_state['values']['model'], $form_state['values']['revision']);
  foreach($form_state['values']['security'] as $scheme_name) {
    $scheme = $security->load($scheme_name);
    if($scheme instanceof \Apigee\SmartDocs\Security\Oauth2Scheme) {
      $template_auth = new \Apigee\SmartDocs\TemplateAuth($config,  $form_state['values']['model']);
      $template_auth_scheme = $template_auth->load($scheme_name);
      if($template_auth_scheme instanceof \Apigee\SmartDocs\Security\Oauth2TemplateAuthScheme){
        $client = new \Guzzle\Http\Client($scheme->getAccessTokenUrl(), [
          'user'=> $form_state['values']['oauth_client_cred_username'],
          'pass' => $form_state['values']['oauth_client_cred_password']]);
        $request = $client->post('?grant_type=' + $scheme->getGrantType() + "&client_id=" +
          $template_auth_scheme->getClientId() + "&client_secret=" + $template_auth_scheme->getClientSecret() ,[],[]);
        $response = $request->send();
        $oauth2Credentials = [];
        $oauth2Credentials['ERRORCODE'] = '';
        $oauth2Credentials['ERRORMESSAGE'] = '';
        $oauth2Credentials['ACCESSTOKEN']  = '234242';
        $oauth2Credentials['ACCESSTOKENTYPE'] = 'bearer';
        $oauth2Credentials['ACCESSTOKENPARAMNAME'] = 'access_token';
        $oauth2Credentials['PROXYURL'] = '';
        return  array('#type' => 'ajax', '#commands' => [
          ajax_command_alert($response->getBody(true)),
          ['command'=>'setAccessTokenAndLocation', 'data' => $oauth2Credentials],
          ajax_command_invoke('[data-dismiss="modal"]', 'click', []),
        ]);
      }
    }
  }
  return  array('#type' => 'ajax', '#commands' => [ajax_command_alert("Something went wrong !!")]);
}